<?php


namespace Tests\Feature;

use App\About;
use App\BlogCategory;
use App\BlogCategoryAccess;
use App\Comment;
use App\Invoice;
use App\PortfolioCategory;
use App\Post;
use App\Project;
use http\Client\Curl\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use AboutTableSeeder;

class CheckPrivateBlogCategoryTest extends TestCase
{


    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub

    }

    public function testAddPostToNotRightCategory()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();
        $project = Project::query()->where("developer_id", $user->last_id)->first();
        $client = \App\User::query()->where("last_id", $project->client_id)->first();
        $blog_access = BlogCategoryAccess::query()->where("user_id", $client->last_id)->where("onlyread", 1)->where(
            "write",
            0
        )->where("isadmin", 0)->first();

        $new_post = [

            'category' => $blog_access->category_id,
            'json' => [
                'blocks' => [
                    [
                        'type' => 'header',
                        'data' => ['text' => 'TEST LA LA', 'level' => 2],
                    ],
                    [
                        'type' => 'image',
                        'data' => [
                            'withBorder' => false,
                            'withBackground' => false,
                            'stretched' => false,
                            'file' => ['url' => 'https://get.wallhere.com/photo/sunlight-landscape-garden-nature-park-tower-tree-flower-landmark-196671.jpg'],
                        ],
                    ],
                    [
                        'type' => 'paragraph',
                        'data' => ['text' => 'SUPER MEGA TEXT'],
                    ],
                ],
            ],
        ];
        $this->actingAs($client, 'api');
        $response = $this->json(
            'POST',
            '/api/blog/addpost',
            $new_post,
            [
                'Authorization' => 'Bearer '.$client->api_token,
            ]
        );


        $response->assertJsonStructure(
            [
                'type',
                'message',


            ]
        );
    }

    public function testAddCheckIncorrectId()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();
        $project = Project::query()->where("developer_id", $user->last_id)->first();
        $client = \App\User::query()->where("last_id", $project->client_id)->first();
        $post = Post::query()->orderByDesc("last_id")->first();

        $new_post_last_id = $post->last_id + 1;
        $blog_category = BlogCategory::query()->first();

        $this->actingAs($user, 'api');

        $new_post = [

            'last_id' => $new_post_last_id,
            'category' => $blog_category->last_id,
            'json' => [
                'blocks' => [
                    [
                        'type' => 'header',
                        'data' => ['text' => 'TEST LA LA', 'level' => 2],
                    ],
                    [
                        'type' => 'image',
                        'data' => [
                            'withBorder' => false,
                            'withBackground' => false,
                            'stretched' => false,
                            'file' => ['url' => 'https://get.wallhere.com/photo/sunlight-landscape-garden-nature-park-tower-tree-flower-landmark-196671.jpg'],
                        ],
                    ],
                    [
                        'type' => 'paragraph',
                        'data' => ['text' => 'SUPER MEGA TEXT'],
                    ],
                ],
            ],
        ];
        $response = $this->json(
            'POST',
            '/api/blog/addpost',
            $new_post,
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );


        $response->assertJsonStructure(
            [
                'type',
                'message',


            ]
        );

    }

    public function testAddCheckNoText()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();
        $project = Project::query()->where("developer_id", $user->last_id)->first();
        $client = \App\User::query()->where("last_id", $project->client_id)->first();

        $new_post = [


        ];
        $response = $this->json(
            'POST',
            '/api/blog/addpost',
            $new_post,
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );


        $response->assertJsonStructure(
            [
                'type',
                'message',


            ]
        );
    }

    public function testAddCheckNoCategory()
    {


        $user = \App\User::query()->where("isdeveloper", 1)->first();
        $project = Project::query()->where("developer_id", $user->last_id)->first();
        $client = \App\User::query()->where("last_id", $project->client_id)->first();

        $new_post = [


            'json' => [
                'blocks' => [
                    [
                        'type' => 'header',
                        'data' => ['text' => 'TEST LA LA', 'level' => 2],
                    ],
                    [
                        'type' => 'image',
                        'data' => [
                            'withBorder' => false,
                            'withBackground' => false,
                            'stretched' => false,
                            'file' => ['url' => 'https://get.wallhere.com/photo/sunlight-landscape-garden-nature-park-tower-tree-flower-landmark-196671.jpg'],
                        ],
                    ],
                    [
                        'type' => 'paragraph',
                        'data' => ['text' => 'SUPER MEGA TEXT'],
                    ],
                ],
            ],
        ];
        $response = $this->json(
            'POST',
            '/api/blog/addpost',
            $new_post,
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );


        $response->assertJsonStructure(
            [
                'type',
                'message',


            ]
        );


    }

    public function testCheckNotHavePrivatePostInList()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();
        $project = Project::query()->where("developer_id", $user->last_id)->first();

        $client = \App\User::query()->where("last_id", $project->client_id)->first();

        $blog_category_private_id = DB::table('blog_categorys')->insertGetId(
            [
                'enable' => 1,
                'title' => 'Супер Тестово',
                'image' => '/files/tmpfiles/default-avatar.png',
                'ispublic' => 0,
                'ismain' => 0,
                'isprivate' => 1,
                'background' => '/files/tmpfiles/default-avatar.png',


            ]
        );


        DB::table('blog_categorys_access')->insertGetId(
            [
                'enable' => 1,
                'category_id' => $blog_category_private_id,
                'user_id' => $user->last_id,
                'onlyread' => 1,
                'write' => 1,
                'isadmin' => 1,


            ]
        );

        $post_id = DB::table("blog_posts")->insertGetId(
            [
                "created_at" => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i::s'),
                'enable' => 1,
                'user_id' => $user->last_id,
                'category' => $blog_category_private_id,
                'disable_comments' => 0,
                'short' => '{"time":1620830582913,"blocks":[{"id":"5sq4WSJyS4","type":"header","data":{"text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u041f\u0430\u0432\u043b\u0430","level":2}},{"id":"7ViKppDLPV","type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"id":"hY5fiYoPZY","type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.21.0"}',
                'content' => '{"time":1620830582913,"blocks":[{"id":"5sq4WSJyS4","type":"header","data":{"text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u041f\u0430\u0432\u043b\u0430","level":2}},{"id":"7ViKppDLPV","type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"id":"hY5fiYoPZY","type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.21.0"}',


            ]
        );

        $this->actingAs($client, 'api');
        $response = $this->json(
            'GET',
            '/api/blog/all/10/0',
            array(),
            [
                'Authorization' => 'Bearer '.$client->api_token,
            ]
        );

        $response->assertJsonStructure(
            [
                'count',
                'posts',


            ]
        );

        $ishave_private_post = false;
        $posts = $response->json("posts");

        if (count($posts) > 0) {
            foreach ($posts as $post) {
                if ($post['category'] == $blog_category_private_id) {
                    $ishave_private_post = true;
                    break;
                }
            }
        }
        $this->assertFalse($ishave_private_post);

        DB::table('blog_categorys_access')->insertGetId(
            [
                'enable' => 1,
                'category_id' => $blog_category_private_id,
                'user_id' => $client->last_id,
                'onlyread' => 1,
                'write' => 1,
                'isadmin' => 1,


            ]
        );

        $this->actingAs($client, 'api');
        $response = $this->json(
            'GET',
            '/api/blog/all/10/0',
            array(),
            [
                'Authorization' => 'Bearer '.$client->api_token,
            ]
        );

        $response->assertJsonStructure(
            [
                'count',
                'posts',


            ]
        );

        $ishave_private_post = false;
        $posts = $response->json("posts");

        if (count($posts) > 0) {
            foreach ($posts as $post) {
                if ($post['category'] == $blog_category_private_id) {
                    $ishave_private_post = true;
                    break;
                }
            }
        }
        $this->assertTrue($ishave_private_post);
    }

    public function testCheckAddSubCommentoPrivate()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();
        $project = Project::query()->where("developer_id", $user->last_id)->first();

        $client = \App\User::query()->where("last_id", $project->client_id)->first();

        $blog_category_private_id = DB::table('blog_categorys')->insertGetId(
            [
                'enable' => 1,
                'title' => 'Супер Тестово',
                'image' => '/files/tmpfiles/default-avatar.png',
                'ispublic' => 0,
                'ismain' => 0,
                'isprivate' => 1,
                'background' => '/files/tmpfiles/default-avatar.png',


            ]
        );


        DB::table('blog_categorys_access')->insertGetId(
            [
                'enable' => 1,
                'category_id' => $blog_category_private_id,
                'user_id' => $user->last_id,
                'onlyread' => 1,
                'write' => 1,
                'isadmin' => 1,


            ]
        );

        $post_id = DB::table("blog_posts")->insertGetId(
            [
                "created_at" => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i::s'),
                'enable' => 1,
                'user_id' => $user->last_id,
                'category' => $blog_category_private_id,
                'disable_comments' => 0,
                'short' => '{"time":1620830582913,"blocks":[{"id":"5sq4WSJyS4","type":"header","data":{"text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u041f\u0430\u0432\u043b\u0430","level":2}},{"id":"7ViKppDLPV","type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"id":"hY5fiYoPZY","type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.21.0"}',
                'content' => '{"time":1620830582913,"blocks":[{"id":"5sq4WSJyS4","type":"header","data":{"text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u041f\u0430\u0432\u043b\u0430","level":2}},{"id":"7ViKppDLPV","type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"id":"hY5fiYoPZY","type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.21.0"}',


            ]
        );


        $this->actingAs($user, 'api');

        $response = $this->json(
            'POST',
            '/api/blog/commentadd/'.$post_id,
            array('comment' => 'super_test'),
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );


        $json = $response->json();
        $comment_id = $json['comment']['last_id'];


        $this->actingAs($client, 'api');
        $response = $this->json(
            'POST',
            '/api/blog/comments/sendsub/'.$post_id."/".$comment_id,
            array('comment' => 'super_test'),
            [
                'Authorization' => 'Bearer '.$client->api_token,
            ]
        );

        $response->assertJsonStructure(
            [
                'type',
                'message',


            ]
        );

        $json = $response->json();


        $this->assertTrue($json['error_key'] == "not_access_to_post");

    }

    public function testCheckAddCommentToPrivate()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();
        $project = Project::query()->where("developer_id", $user->last_id)->first();

        $client = \App\User::query()->where("last_id", $project->client_id)->first();

        $blog_category_private_id = DB::table('blog_categorys')->insertGetId(
            [
                'enable' => 1,
                'title' => 'Супер Тестово',
                'image' => '/files/tmpfiles/default-avatar.png',
                'ispublic' => 0,
                'ismain' => 0,
                'isprivate' => 1,
                'background' => '/files/tmpfiles/default-avatar.png',


            ]
        );


        DB::table('blog_categorys_access')->insertGetId(
            [
                'enable' => 1,
                'category_id' => $blog_category_private_id,
                'user_id' => $user->last_id,
                'onlyread' => 1,
                'write' => 1,
                'isadmin' => 1,


            ]
        );

        $post_id = DB::table("blog_posts")->insertGetId(
            [
                "created_at" => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i::s'),
                'enable' => 1,
                'user_id' => $user->last_id,
                'category' => $blog_category_private_id,
                'disable_comments' => 0,
                'short' => '{"time":1620830582913,"blocks":[{"id":"5sq4WSJyS4","type":"header","data":{"text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u041f\u0430\u0432\u043b\u0430","level":2}},{"id":"7ViKppDLPV","type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"id":"hY5fiYoPZY","type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.21.0"}',
                'content' => '{"time":1620830582913,"blocks":[{"id":"5sq4WSJyS4","type":"header","data":{"text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u041f\u0430\u0432\u043b\u0430","level":2}},{"id":"7ViKppDLPV","type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"id":"hY5fiYoPZY","type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.21.0"}',


            ]
        );


        $this->actingAs($client, 'api');

        $response = $this->json(
            'POST',
            '/api/blog/commentadd/'.$post_id,
            array('comment' => 'super_test'),
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );

        $response->assertJsonStructure(
            [
                'type',
                'message',


            ]
        );
        $json = $response->json();
        $this->assertTrue($json['error_key'] == "not_have_access_to_post");


    }

    public function testDisableComment()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();
        $project = Project::query()->where("developer_id", $user->last_id)->first();

        $client = \App\User::query()->where("last_id", $project->client_id)->first();

        $blog_category_private_id = DB::table('blog_categorys')->insertGetId(
            [
                'enable' => 1,
                'title' => 'Супер Тестово',
                'image' => '/files/tmpfiles/default-avatar.png',
                'ispublic' => 0,
                'ismain' => 0,
                'isprivate' => 1,
                'background' => '/files/tmpfiles/default-avatar.png',


            ]
        );


        DB::table('blog_categorys_access')->insertGetId(
            [
                'enable' => 1,
                'category_id' => $blog_category_private_id,
                'user_id' => $user->last_id,
                'onlyread' => 1,
                'write' => 1,
                'isadmin' => 1,


            ]
        );

        $post_id = DB::table("blog_posts")->insertGetId(
            [
                "created_at" => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i::s'),
                'enable' => 1,
                'user_id' => $user->last_id,
                'category' => $blog_category_private_id,
                'disable_comments' => 1,
                'short' => '{"time":1620830582913,"blocks":[{"id":"5sq4WSJyS4","type":"header","data":{"text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u041f\u0430\u0432\u043b\u0430","level":2}},{"id":"7ViKppDLPV","type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"id":"hY5fiYoPZY","type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.21.0"}',
                'content' => '{"time":1620830582913,"blocks":[{"id":"5sq4WSJyS4","type":"header","data":{"text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u041f\u0430\u0432\u043b\u0430","level":2}},{"id":"7ViKppDLPV","type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"id":"hY5fiYoPZY","type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.21.0"}',


            ]
        );


        $this->actingAs($user, 'api');

        $response = $this->json(
            'POST',
            '/api/blog/commentadd/'.$post_id,
            array('comment' => 'super_test'),
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );

        $response->assertJsonStructure(
            [
                'type',
                'message',


            ]
        );

    }

    public function testcheckAccessPrivate()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();
        $project = Project::query()->where("developer_id", $user->last_id)->first();

        $client = \App\User::query()->where("last_id", $project->client_id)->first();

        $blog_category_private_id = DB::table('blog_categorys')->insertGetId(
            [
                'enable' => 1,
                'title' => 'Супер Тестово',
                'image' => '/files/tmpfiles/default-avatar.png',
                'ispublic' => 0,
                'ismain' => 0,
                'isprivate' => 1,
                'background' => '/files/tmpfiles/default-avatar.png',


            ]
        );


        DB::table('blog_categorys_access')->insertGetId(
            [
                'enable' => 1,
                'category_id' => $blog_category_private_id,
                'user_id' => $user->last_id,
                'onlyread' => 1,
                'write' => 1,
                'isadmin' => 1,


            ]
        );

        $post_id = DB::table("blog_posts")->insertGetId(
            [
                "created_at" => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i::s'),
                'enable' => 1,
                'user_id' => $user->last_id,
                'category' => $blog_category_private_id,
                'disable_comments' => 0,
                'short' => '{"time":1620830582913,"blocks":[{"id":"5sq4WSJyS4","type":"header","data":{"text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u041f\u0430\u0432\u043b\u0430","level":2}},{"id":"7ViKppDLPV","type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"id":"hY5fiYoPZY","type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.21.0"}',
                'content' => '{"time":1620830582913,"blocks":[{"id":"5sq4WSJyS4","type":"header","data":{"text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u041f\u0430\u0432\u043b\u0430","level":2}},{"id":"7ViKppDLPV","type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"id":"hY5fiYoPZY","type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.21.0"}',


            ]
        );


        $this->actingAs($client, 'api');
        $response = $this->json(
            'GET',
            '/api/blog/post/'.$post_id,
            array(),
            [
                'Authorization' => 'Bearer '.$client->api_token,
            ]
        );


        $response->assertJsonStructure(
            [
                'type',
                'message',


            ]
        );

    }

}