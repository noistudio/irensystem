<?php

namespace Tests\Feature;

use App\About;
use App\BlogCategory;
use App\Comment;
use App\Invoice;
use App\PortfolioCategory;
use App\Post;
use App\Project;
use http\Client\Curl\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use AboutTableSeeder;

class PostsControllerTest extends TestCase
{


    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub
       
    }

    public function testCategorys()
    {

        $user = \App\User::query()->where("isdeveloper", 1)->first();

        $project = Project::query()->where("developer_id", $user->last_id)->first();

        $client = \App\User::query()->where("last_id", $project->client_id)->first();


        $this->actingAs($user, 'api');

        $response = $this->json(
            'GET',
            '/api/blog/categorys',
            array(),
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );

        $response->assertJsonStructure(
            [
                '*' => ["last_id"],


            ]
        );
    }

    public function testAddUpdate()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();
        $blog_category = BlogCategory::query()->first();

        $this->actingAs($user, 'api');

        $new_post = [

            'category' => $blog_category->last_id,
            'json' => [
                'blocks' => [
                    [
                        'type' => 'header',
                        'data' => ['text' => 'TEST LA LA', 'level' => 2],
                    ],
                    [
                        'type' => 'image',
                        'data' => [
                            'withBorder' => false,
                            'withBackground' => false,
                            'stretched' => false,
                            'file' => ['url' => 'https://get.wallhere.com/photo/sunlight-landscape-garden-nature-park-tower-tree-flower-landmark-196671.jpg'],
                        ],
                    ],
                    [
                        'type' => 'paragraph',
                        'data' => ['text' => 'SUPER MEGA TEXT'],
                    ],
                ],
            ],
        ];
        $response = $this->json(
            'POST',
            '/api/blog/addpost',
            $new_post,
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );


        $response->assertJsonStructure(
            [
                'type',
                'post_id',


            ]
        );
        $response_content = $response->json();
        $post_id = $response_content['post_id'];
        $new_post['last_id'] = $post_id;

        $response = $this->json(
            'POST',
            '/api/blog/addpost',
            $new_post,
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );


        $response->assertJsonStructure(
            [
                'type',
                'post_id',


            ]
        );

        $response = $this->json(
            'GET',
            '/api/blog/enable/'.$post_id,
            $new_post,
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );


        $response->assertJsonStructure(
            [
                'type',
                'post',


            ]
        );


    }

    public function testAllandShowPost()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();

        $project = Project::query()->where("developer_id", $user->last_id)->first();

        $client = \App\User::query()->where("last_id", $project->client_id)->first();

        $post = Post::query()->where("user_id", $user->last_id)->first();

        $this->actingAs($user, 'api');

        $response = $this->json(
            'GET',
            '/api/blog/all/10/0',
            array(),
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );

        $response->assertJsonStructure(
            [
                'count',
                'posts',


            ]
        );

        $response = $this->json(
            'GET',
            '/api/blog/post/'.$post->last_id,
            array(),
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );

        $response->assertJsonStructure(
            [
                'type',
                'post',


            ]
        );

    }

    public function testDeleteComment()
    {
        $user = \App\User::query()->where("isdeveloper", 1)->first();

        $project = Project::query()->where("developer_id", $user->last_id)->first();

        $client = \App\User::query()->where("last_id", $project->client_id)->first();

        $post = Post::query()->where("user_id", $user->last_id)->first();

        $this->actingAs($user, 'api');

        $response = $this->json(
            'POST',
            '/api/blog/commentadd/'.$post->last_id,
            array('comment' => 'super_test'),
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );

        $response->assertJsonStructure(
            [
                'type',
                'comment',


            ]
        );
        $comment = $response->json();

        $comment_id = $comment['comment']['last_id'];

        $response = $this->json(
            'POST',
            '/api/blog/comments/sendsub/'.$post->last_id."/".$comment_id,
            array('comment' => 'super_test'),
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );

        $response->assertJsonStructure(
            [
                'type',
                'comments',


            ]
        );

        $comments = $response->json();
        $subcomment_id = $comments['comments'][0]['last_id'];

        $response = $this->json(
            'GET',
            '/api/blog/delsubcomment/'.$subcomment_id."/".$comment_id."/".$post->last_id,
            array(),
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );


        $response->assertJsonStructure(
            [
                'type',
                'comments',


            ]
        );

        $response = $this->json(
            'GET',
            '/api/blog/delcomment/'.$comment_id."/".$post->last_id,
            array(),
            [
                'Authorization' => 'Bearer '.$user->api_token,
            ]
        );


        $response->assertJsonStructure(
            [
                'type',
                'comments',


            ]
        );
    }


}
