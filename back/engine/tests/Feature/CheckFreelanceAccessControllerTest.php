<?php


namespace Tests\Feature;

use App\About;
use App\BlogCategory;
use App\BlogCategoryAccess;
use App\Comment;
use App\Invoice;
use App\PortfolioCategory;
use App\Post;
use App\Project;
use App\Status;
use http\Client\Curl\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Tests\TestCase;
use AboutTableSeeder;

class CheckFreelanceAccessControllerTest extends TestCase
{


    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub

    }

    public function testCheckAccessToProject()
    {

        $developer_default = \App\User::query()->where("username", 'developerusername')->first();

        $project_default = Project::query()->where("developer_id", $developer_default->last_id)->first();

        $developer_id1 = DB::table('proj_users')->insertGetId(
            [
                'enable' => 1,
                'name' => 'Super Coder',
                'account' => 'Здесь какие то реквизиты',
                'avatar' => '/files/tmpfiles/default-avatar.png',
                'username' => 'developerusername1',
                'telegram_id' => rand(1000, 100000),
                'isdeveloper' => 1,
                'api_token' => Str::random(10),
                'isteam' => 1,
                'job' => 'Тестовый исполнитель',


            ]
        );
        $developer1 = \App\User::query()->where("last_id", $developer_id1)->first();

        $status_freelance = Status::query()->where("issearch", 1)->first();
        $client = \App\User::query()->where("isdeveloper", 0)->first();

        $project_category1 = DB::table('proj_categorys')->insertGetId(
            [
                'enable' => 1,
                'name' => 'Разработка на Laravel1',
                'image' => '/files/tmpfiles/default-avatar.png',
                'description' => '        <h3>Разрабатываю  необычные проекты:)</h3>
              <p>Огромный опыт в разработке любых типов веб-приложений позволяет делать любые типы веб-проектов на ваш вкус и цвет</p>
<p>Имею опыт создания  как fullstack разработчик, так и only backend. Имею опыт в разработке сложных фриланс-систем, CRM , SaaS, маркетплейсов , социальных сетей и прочих сложных систем. Загляните в портфолио и убедитесь сами</p>
<p>Разрабатываю обычно на Laravel + Vue.js .</p>
              <ul class="list-unstyled mt-5">
                <li class="py-2">
                  <div class="d-flex align-items-center">
                    <badge type="success" circle="" class="mr-3" icon="ni ni-settings-gear-65"></badge>
                    <h6 class="mb-0">Лучшие условия</h6>
                  </div>
                </li>
                <li class="py-2">
                  <div class="d-flex align-items-center">
                    <badge type="success" circle="" class="mr-3" icon="ni ni-html5"></badge>
                    <h6 class="mb-0">Результативность</h6>
                  </div>
                </li>
                <li class="py-2">
                  <div class="d-flex align-items-center">
                    <badge type="success" circle="" class="mr-3" icon="ni ni-satisfied"></badge>
                    <h6 class="mb-0">Поддержка огонь</h6>
                  </div>
                </li>
              </ul>',

            ]
        );

        DB::table('proj_users_categorys')->insertGetId(
            [
                'enable' => 1,
                'category_id' => $project_category1,
                'user_id' => $developer_id1,
            ]
        );

        $developer_id2 = DB::table('proj_users')->insertGetId(
            [
                'enable' => 1,
                'name' => 'Super Coder',
                'account' => 'Здесь какие то реквизиты',
                'avatar' => '/files/tmpfiles/default-avatar.png',
                'username' => 'developerusername2',
                'telegram_id' => rand(1000, 100000),
                'isdeveloper' => 1,
                'api_token' => Str::random(10),
                'isteam' => 1,
                'job' => 'Тестовый исполнитель',


            ]
        );

        $developer2 = \App\User::query()->where("last_id", $developer_id2)->first();

        $project_category2 = DB::table('proj_categorys')->insertGetId(
            [
                'enable' => 1,
                'name' => 'Разработка на Laravel1',
                'image' => '/files/tmpfiles/default-avatar.png',
                'description' => '        <h3>Разрабатываю  необычные проекты:)</h3>
              <p>Огромный опыт в разработке любых типов веб-приложений позволяет делать любые типы веб-проектов на ваш вкус и цвет</p>
<p>Имею опыт создания  как fullstack разработчик, так и only backend. Имею опыт в разработке сложных фриланс-систем, CRM , SaaS, маркетплейсов , социальных сетей и прочих сложных систем. Загляните в портфолио и убедитесь сами</p>
<p>Разрабатываю обычно на Laravel + Vue.js .</p>
              <ul class="list-unstyled mt-5">
                <li class="py-2">
                  <div class="d-flex align-items-center">
                    <badge type="success" circle="" class="mr-3" icon="ni ni-settings-gear-65"></badge>
                    <h6 class="mb-0">Лучшие условия</h6>
                  </div>
                </li>
                <li class="py-2">
                  <div class="d-flex align-items-center">
                    <badge type="success" circle="" class="mr-3" icon="ni ni-html5"></badge>
                    <h6 class="mb-0">Результативность</h6>
                  </div>
                </li>
                <li class="py-2">
                  <div class="d-flex align-items-center">
                    <badge type="success" circle="" class="mr-3" icon="ni ni-satisfied"></badge>
                    <h6 class="mb-0">Поддержка огонь</h6>
                  </div>
                </li>
              </ul>',

            ]
        );

        DB::table('proj_users_categorys')->insertGetId(
            [
                'enable' => 1,
                'category_id' => $project_category2,
                'user_id' => $developer_id2,
            ]
        );


        $project_1 = DB::table("proj_projects")->insertGetId(
            [
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
                'enable' => 0,
                'action' => '',
                'name_project' => 'Название вашего замечательного проекта!',
                'category_id' => $project_category1,
                'start_time' => date('Y-m-d H:i:s'),
                'isclose' => 0,
                'developer_id' => 0,
                'client_id' => $client->last_id,
                'status' => $status_freelance->last_id,
                'json' => '{"time":1618521675369,"blocks":[{"type":"header","data":{"text":"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u0437\u0430\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430!","level":2}},{"type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.19.1"}',

            ]

        );

        $project_2 = DB::table("proj_projects")->insertGetId(
            [
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
                'enable' => 0,
                'action' => '',
                'name_project' => 'Название вашего замечательного проекта!',
                'category_id' => $project_category2,
                'start_time' => date('Y-m-d H:i:s'),
                'isclose' => 0,
                'developer_id' => 0,
                'client_id' => $client->last_id,
                'status' => $status_freelance->last_id,
                'json' => '{"time":1618521675369,"blocks":[{"type":"header","data":{"text":"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u0437\u0430\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430!","level":2}},{"type":"paragraph","data":{"text":"\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:"}},{"type":"list","data":{"style":"unordered","items":["\u0417\u043d\u0430\u0442\u044c Laravel","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Vue.js","\u0423\u043c\u0435\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 REST API"]}}],"version":"2.19.1"}',

            ]

        );

        $this->actingAs($developer1, 'api');
        $response = $this->json(
            'GET',
            '/api/projects/all',
            [],
            [
                'Authorization' => 'Bearer '.$developer1->api_token,
            ]
        );

        $projects = $response->json("projects");
        $is_found_project2 = false;
        $is_found_project_default = false;

        if (count($projects)) {
            foreach ($projects as $project) {
                if ($project['last_id'] == $project_2) {
                    $is_found_project2 = true;

                }

                if ($project['last_id'] == $project_default->last_id) {
                    $is_found_project_default = true;

                }
            }
        }
        $this->assertFalse($is_found_project2);
        $this->assertFalse($is_found_project_default);


        $this->actingAs($developer1, 'api');
        $response = $this->json(
            'GET',
            '/api/projects/get/'.$project_2,
            [],
            [
                'Authorization' => 'Bearer '.$developer1->api_token,
            ]
        );

        $response->assertJsonStructure(
            ['type', 'message']
        );
        $error_key = $response->json("error_key");

        $this->assertTrue($error_key == 'project_not_found');


        $this->actingAs($developer1, 'api');
        $response = $this->json(
            'GET',
            '/api/projects/get/'.$project_default->last_id,
            [],
            [
                'Authorization' => 'Bearer '.$developer1->api_token,
            ]
        );

        $response->assertJsonStructure(
            ['type', 'message']
        );
        $error_key = $response->json("error_key");

        $this->assertTrue($error_key == 'project_not_found');


    }


}